// 1 - Tester le lien de l'API dans le navigateur (https://restcountries.com/v3.1/all)
// https://restcountries.com/v3.1/all

// Les const se mettent avt les let :
const countriesContainer = document.querySelector(".countries-container");
const inputSearch = document.getElementById("inputSearch");
const inputRange = document.getElementById("inputRange");
const rangeValue = document.getElementById("rangeValue");
const btnSort = document.querySelectorAll(".btnSort"); // On r√©cup√®re juste la class des 3 btn

let countries = [];
let critereTri = "alpha";

// Fonction pour aller chercher les donn√©es de l'API
async function fetchCountries() {
  await fetch(`https://restcountries.com/v3.1/all`)
    .then((res) => res.json()) // On transforme la r√©ponse en JSON
    .then((data) => {
      countries = data; // Stocke les donn√©es API dans "countries"
      console.log(countries); // toujours ce garder l'objet ouvert dans la console
      countriesDisplay(); // ‚¨ÖÔ∏è On appelle cette fonction apr√®s avoir re√ßu les donn√©es
      // Copie initiale de l'ordre des pays
      // initialOrderCountries = [...countries]; // cr√©ation d'un copie de countries pour l'utilser dans les 2nds click des boutons
    })
    .catch((error) =>
      console.error("Erreur lors de la r√©cup√©ration des pays :", error)
    ); // Gestion des erreurs
}

// Fonction d'affichage des Pays
function countriesDisplay() {
  const searchTerm = inputSearch.value.toLowerCase(); // R√©cup√®re le texte entr√©
  const numberOfCountries = inputRange.value; // Nombre de pays √† afficher

  // Met √† jour la valeur affich√©e √† c√¥t√© du curseur
  rangeValue.textContent = numberOfCountries;

  // Filtrage et limitation des pays affich√©s
  const filteredCountries = countries
    .filter((country) =>
      country.translations.fra.common.toLowerCase().includes(searchTerm)
    )
    .sort((a, b) => {
      // attention si on a plusieurs lignes dans le sort() ou le filter() mettre des {} et des return !!! exemple ci-dessous : (= explications vid√©o correction du TP √† 38:31)
      if (critereTri === "maxToMin") {
        return b.population - a.population;
      } else if (critereTri === "minToMax") {
        return a.population - b.population;
      } else if (critereTri === "alpha") {
        return a.translations.fra.common.localeCompare(
          b.translations.fra.common
        );
      }
    })
    .slice(0, numberOfCountries);

  // G√©n√©ration du HTML
  countriesContainer.innerHTML = filteredCountries
    .map(
      (country) => `
    <div class="card">
          <img src="${country.flags.svg}" alt="Drapeau de ${
        country.translations.fra.common
      }">
      <h2>${country.translations.fra.common}</h2>
      <h3>${country.capital ? country.capital[0] : "Aucune capitale"}</h3>
      <p>Population : ${country.population.toLocaleString(
        "fr-FR"
      )} habitants</p>
  
    </div>
    `
    )
    .join(""); // √âvite les virgules dans le HTML
}

//A noter = .svg plus l√©ger que .png

// Met √† jour l'affichage √† chaque modification du texte ou du curseur
inputSearch.addEventListener("input", countriesDisplay);
inputRange.addEventListener("input", countriesDisplay);

// Gestion des click sur les 3 boutons: (√©vite de cr√©er 3 events)
btnSort.forEach((btn) => {
  btn.addEventListener("click", (e) => {
    critereTri = e.target.id;
    countriesDisplay();
  });
});

// Charger les pays au d√©marrage
fetchCountries();

// let initialOrderCountries = [];
// let sortedAlpha = false;
// let sortedCroi = false;
// let sortedDec = false;

// Tri alphab√©tique de pays au click du bouton "Alpha" puis remise √† l'ordre initial au 2nd click

// triAlpha.addEventListener("click", () => {
//   if (sortedAlpha) {
//     // Si le tableau a d√©j√† √©t√© tri√© (sorted === true), on r√©tablit l'ordre initial
//     countries = [...initialOrderCountries];
//   } else {
//     // Sinon, on trie par ordre alphab√©tique
//     countries = [...initialOrderCountries].sort((a, b) =>
//       a.name.common.localeCompare(b.name.common)
//     );
//   }
//   sortedAlpha = !sortedAlpha; // Inverse l'√©tat de sorted au click = sinon, on reste √† l'√©tat du 1er click (tri alpha)
//   countriesDisplay(); // Met √† jour l'affichage avec les nouvelles donn√©es
// });

// // Tri croissant de la population des pays au click du bouton "minToMax" puis remise √† l'ordre initial au 2nd click

// triCroissant.addEventListener("click", () => {
//   if (sortedCroi) {
//     // Si le tableau a d√©j√† √©t√© tri√© (sorted === true), on r√©tablit l'ordre initial
//     countries = [...initialOrderCountries];
//   } else {
//     // Sinon, on trie par ordre croissant
//     countries = [...initialOrderCountries].sort(
//       (a, b) => a.population - b.population
//     );
//   }
//   sortedCroi = !sortedCroi; // Inverse l'√©tat de sorted au click = sinon, on reste √† l'√©tat du 1er click (tri alpha)
//   countriesDisplay(); // Met √† jour l'affichage avec les nouvelles donn√©es
// });

// // Tri d√©croissant de pays au click du bouton "maxToMin" puis remise √† l'ordre initial au 2nd click

// triDecroissant.addEventListener("click", () => {
//   if (sortedDec) {
//     // Si le tableau a d√©j√† √©t√© tri√© (sorted === true), on r√©tablit l'ordre initial
//     countries = [...initialOrderCountries];
//   } else {
//     // Sinon, on trie par ordre d√©croissant
//     countries = [...initialOrderCountries].sort(
//       (a, b) => b.population - a.population
//     );
//   }
//   sortedDec = !sortedDec; // Inverse l'√©tat de sorted au click = sinon, on reste √† l'√©tat du 1er click (tri alpha)
//   countriesDisplay(); // Met √† jour l'affichage avec les nouvelles donn√©es
// });

// R√©sum√© de l'ordre d'ex√©cution üöÄ
// 1Ô∏è‚É£ Le code d√©marre et ex√©cute fetchCountries();.
// 2Ô∏è‚É£ fetchCountries() fait une requ√™te √† l'API (attend la r√©ponse).
// 3Ô∏è‚É£ Une fois la r√©ponse re√ßue, les donn√©es sont stock√©es dans countries.
// 4Ô∏è‚É£ countriesDisplay() est appel√©e pour afficher les donn√©es sur la page. (il faut le mettre dans le await .then sinon, l'API n'a pas eu le tps de faire sa requ√™te et l'affichage est vide)

// 7 - G√©rer les 3 boutons pour trier (m√©thode sort()) les pays
