// 1 - Tester le lien de l'API dans le navigateur (https://restcountries.com/v3.1/all)
// https://restcountries.com/v3.1/all

const countriesContainer = document.querySelector(".countries-container");
const form = document.querySelector("form");
const inputRange = document.getElementById("inputRange");

let countries = [];

// Fonction pour aller chercher les donn√©es de l'API
async function fetchCountries() {
  await fetch(`https://restcountries.com/v3.1/all`)
    .then((res) => res.json()) // On transforme la r√©ponse en JSON
    .then((data) => {
      countries = data; // Stocke les donn√©es API dans "countries"
      console.log(countries); // toujours ce garder l'objet ouvert dans la console
      countriesDisplay(); // ‚¨ÖÔ∏è On appelle cette fonction apr√®s avoir re√ßu les donn√©es
    })
    .catch((error) =>
      console.error("Erreur lors de la r√©cup√©ration des pays :", error)
    ); // Gestion des erreurs
}

// Fonction d'affichage des Pays
function countriesDisplay() {
  // if (!countries || countries.length === 0) {
  //   // V√©rifie si countries est null ou vide
  //   countriesContainer.innerHTML = "<h4>Aucun r√©sultat</h4>";
  // // } else {
  // //   console.log("Pays trouv√©s:", countries);
  // //   // Si le tableau contient des pays, on affiche les r√©sultats
  // //   countries.length = 48; // Si tu veux limiter √† 48 pays

    // On cr√©e une fonction pour convertir la population :
    function formattedPopulation(population) {
      const newPopulation = population.toLocaleString("fr-FR"); // "1 456 789"
      return newPopulation;
    }

    countriesContainer.innerHTML = countries
      .filter((country) =>
        country.name.common.toLowerCase().includes(inputSearch.value) // Filtrage par recherche
      )
      .slice(0, inputRange.value)
      .map(
        (country) => `
        <div class="card">
          <img src="${country.flags.png}" alt="Drapeau de ${
          country.name.common
        }">
          <h2>${country.name.common}</h2>
          <h3>${country.capital[0]}</h3>
          <p>Population : ${formattedPopulation(country.population)}</p>
          
          </div>
      `
      )
      .join(""); // √âvite les virgules dans le HTML
  }


// Appeler la fonction pour r√©cup√©rer et afficher les pays
fetchCountries();

// R√©sum√© de l'ordre d'ex√©cution üöÄ
// 1Ô∏è‚É£ Le code d√©marre et ex√©cute fetchCountries();.
// 2Ô∏è‚É£ fetchCountries() fait une requ√™te √† l'API (attend la r√©ponse).
// 3Ô∏è‚É£ Une fois la r√©ponse re√ßue, les donn√©es sont stock√©es dans countries.
// 4Ô∏è‚É£ countriesDisplay() est appel√©e pour afficher les donn√©es sur la page. (il faut le mettre dans le await .then sinon, l'API n'a pas eu le tps de faire sa requ√™te et l'affichage est vide)

// 5 - R√©cup√©rer ce qui est tap√© dans l'input et filtrer (avant le map) les donn√©es
// country.name.includes(inputSearch.value);

const inputSearch = document.getElementById("inputSearch");
inputSearch.addEventListener("input", (e) => {
  // console.log(e.target.value); // On veut r√©cup√©rer la valeur de l'input
  // a chaque fois que qqc est tap√© dans l'input on peut afficher les plats (en temps r√©el) :
  fetchCountries(e.target.value.toLowerCase()).then(() => countriesDisplay());
});

// 6 - Avec la m√©thode Slice g√©rer le nombre de pays affich√©s (inputRange.value)

// 7 - G√©rer les 3 boutons pour trier (m√©thode sort()) les pays

//s'appuyez sur l'architecture de l'application de cuisine

// Architecture de la fonction d'affichage
// countriesContainer.innerHtml = monTableau
// .filter((country) => country.nomdupays.includes(inputSearch.value))
// .sort((a,b) => {
//   if(...) {
//      return ...
//    } else if (...) {
//      return ...
//    }
//     })
//     .slice(0, inputRange.value)
//     .map((country) => `
//     <div class="card">
//     </div>
//     `)
