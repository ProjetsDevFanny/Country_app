// 1 - Tester le lien de l'API dans le navigateur (https://restcountries.com/v3.1/all)
// https://restcountries.com/v3.1/all

const countriesContainer = document.querySelector(".countries-container");
const inputSearch = document.getElementById("inputSearch");
const rangeSlider = document.getElementById("inputRange");
const rangeValue = document.getElementById("rangeValue");

let countries = [];

// Fonction pour aller chercher les donn√©es de l'API
async function fetchCountries() {
  await fetch(`https://restcountries.com/v3.1/all`)
    .then((res) => res.json()) // On transforme la r√©ponse en JSON
    .then((data) => {
      countries = data; // Stocke les donn√©es API dans "countries"
      console.log(countries); // toujours ce garder l'objet ouvert dans la console
      countriesDisplay(); // ‚¨ÖÔ∏è On appelle cette fonction apr√®s avoir re√ßu les donn√©es
      // Copie initiale de l'ordre des pays
      initialOrderCountries = [...countries]; // cr√©ation d'un copie de countries pour l'utilser dans les 2nds click des boutons
    })
    .catch((error) =>
      console.error("Erreur lors de la r√©cup√©ration des pays :", error)
    ); // Gestion des erreurs
}

// Fonction d'affichage des Pays
function countriesDisplay() {
  const searchTerm = inputSearch.value.toLowerCase(); // R√©cup√®re le texte entr√©
  const numberOfCountries = rangeSlider.value; // Nombre de pays √† afficher

  // Met √† jour la valeur affich√©e √† c√¥t√© du curseur
  rangeValue.textContent = numberOfCountries;

  // On cr√©e une fonction pour convertir la population :
  function formattedPopulation(population) {
    const newPopulation = population.toLocaleString("fr-FR"); // "1 456 789"
    return newPopulation;
  }

  // Filtrage et limitation des pays affich√©s
  const filteredCountries = countries
    .filter((country) => country.name.common.toLowerCase().includes(searchTerm))
    .slice(0, numberOfCountries);

  // G√©n√©ration du HTML
  countriesContainer.innerHTML = filteredCountries
    .map(
      (country) => `
    <div class="card">
    <img src="${country.flags.png}" alt="Drapeau de ${country.name.common}">
    <h2>${country.name.common}</h2>
    <h3>${country.capital ? country.capital[0] : "Aucune capitale"}</h3>
    <p>Population : ${formattedPopulation(country.population)}</p>
    
    </div>
    `
    )
    .join(""); // √âvite les virgules dans le HTML
}

// Met √† jour l'affichage √† chaque modification du texte ou du curseur
inputSearch.addEventListener("input", countriesDisplay);
rangeSlider.addEventListener("input", countriesDisplay);

// Charger les pays au d√©marrage
fetchCountries();

// On r√©cup√®re les 3 boutons:
const triCroissant = document.getElementById("minToMax");
const triDecroissant = document.getElementById("maxToMin");
const triAlpha = document.getElementById("alpha");

let initialOrderCountries = [];
let sorted = false;

// Tri alphab√©tique de pays au click du bouton "Alpha" puis remise √† l'ordre initial au 2nd click

// triAlpha.addEventListener("click", () => {
//   if (sorted) {
//     // Si le tableau a d√©j√† √©t√© tri√© (sorted === true), on r√©tablit l'ordre initial
//     countries = [...initialOrderCountries];
//   } else {
//     // Sinon, on trie par ordre alphab√©tique
//     countries = [...initialOrderCountries].sort((a, b) =>
//       a.name.common.localeCompare(b.name.common)
//     );
//   }
//   sorted = !sorted; // Inverse l'√©tat de sorted au click = sinon, on reste √† l'√©tat du 1er click (tri alpha)
//   countriesDisplay(); // Met √† jour l'affichage avec les nouvelles donn√©es
// });

// // Tri croissant de la population des pays au click du bouton "minToMax" puis remise √† l'ordre initial au 2nd click

// triCroissant.addEventListener("click", () => {
//   if (sorted) {
//     // Si le tableau a d√©j√† √©t√© tri√© (sorted === true), on r√©tablit l'ordre initial
//     countries = [...initialOrderCountries];
//   } else {
//     // Sinon, on trie par ordre croissant
//     countries = [...initialOrderCountries].sort(
//       (a, b) => a.population - b.population
//     );
//   }
//   sorted = !sorted; // Inverse l'√©tat de sorted au click = sinon, on reste √† l'√©tat du 1er click (tri alpha)
//   countriesDisplay(); // Met √† jour l'affichage avec les nouvelles donn√©es
// });

// // Tri d√©croissant de pays au click du bouton "maxToMin" puis remise √† l'ordre initial au 2nd click

// triDecroissant.addEventListener("click", () => {
//   if (sorted) {
//     // Si le tableau a d√©j√† √©t√© tri√© (sorted === true), on r√©tablit l'ordre initial
//     countries = [...initialOrderCountries];
//   } else {
//     // Sinon, on trie par ordre d√©croissant
//     countries = [...initialOrderCountries].sort(
//       (a, b) => b.population - a.population
//     );
//   }
//   sorted = !sorted; // Inverse l'√©tat de sorted au click = sinon, on reste √† l'√©tat du 1er click (tri alpha)
//   countriesDisplay(); // Met √† jour l'affichage avec les nouvelles donn√©es
// });

// Regroupement des 3 √©v√®nements dans une fonction

// Fonction de tri g√©n√©rique
function sortCountries(critereTri) {
  if (sorted) {
    // Si le tableau a d√©j√† √©t√© tri√© (sorted === true), on r√©tablit l'ordre initial
    countries = [...initialOrderCountries];
  } else {
    // Sinon, on trie en fonction du crit√®re
    countries = [...initialOrderCountries].sort((a, b) => {
      if (critereTri === "alpha") {
        return a.name.common.localeCompare(b.name.common);
      } else if (critereTri === "croissant") {
        return a.population - b.population;
      } else if (critereTri === "decroissant") {
        return b.population - a.population;
      }
    });
  }

  sorted = !sorted; // On inverse l'√©tat du tri
  countriesDisplay(); // Mise √† jour de l'affichage
}

// Ajout des √©couteurs d'√©v√©nements
triAlpha.addEventListener("click", () => sortCountries("alpha"));
triCroissant.addEventListener("click", () => sortCountries("croissant"));
triDecroissant.addEventListener("click", () => sortCountries("decroissant"));

// Aute m√©thode de tri alpha, plus longue :

// countries.sort((a, b) => {
//   if (a.name.common < b.name.common) {
//     return -1; // a vient avant b
//   } else if (a.name.common > b.name.common) {
//     return 1; // b vient avant a
//   }
//   return 0; // √©galit√©
// });

// R√©sum√© de l'ordre d'ex√©cution üöÄ
// 1Ô∏è‚É£ Le code d√©marre et ex√©cute fetchCountries();.
// 2Ô∏è‚É£ fetchCountries() fait une requ√™te √† l'API (attend la r√©ponse).
// 3Ô∏è‚É£ Une fois la r√©ponse re√ßue, les donn√©es sont stock√©es dans countries.
// 4Ô∏è‚É£ countriesDisplay() est appel√©e pour afficher les donn√©es sur la page. (il faut le mettre dans le await .then sinon, l'API n'a pas eu le tps de faire sa requ√™te et l'affichage est vide)

// 7 - G√©rer les 3 boutons pour trier (m√©thode sort()) les pays
